#!/usr/bin/ruby
# avi2dvd:  Ruby script to automatically transcode video and author DVD's 


#ASPECT = "16:9"
#ASPECT = "4:3"
MIN_AUDIO_BITRATE = 128     # In kb/s
AUDIO_BITRATE = 192         # In kb/s
MIN_VIDEO_BITRATE = 1500    # In kb/s
MAX_VIDEO_BITRATE = 6000    # In kb/s
DVD_SIZE = 4.2              # In gigabytes
MAX_RUNTIME = ((DVD_SIZE*1024*1024*8)/(MIN_VIDEO_BITRATE+MIN_AUDIO_BITRATE)/60).to_i  # In minutes

def do_convert(files)
    files = files.collect do |f|
        raise "File not found: #{f}" unless File.exist?(f)
        {
            :filename => f ,
            :length => get_duration(f),
            :infile_base => f.sub(/\.[a-z0-9]{2,4}$/i,'')
        }
    end
    
    total_runtime = files.inject(0){|sum,x| sum += x[:length].to_i}
    unless total_runtime <= MAX_RUNTIME
        puts "ERROR: Total runtime of #{total_runtime} is greater than #{MAX_RUNTIME} minutes" 
        return 1
    end
    
    audio_bitrate = (total_runtime > 300 ? MIN_AUDIO_BITRATE : AUDIO_BITRATE)
    video_bitrate = get_video_bitrate(total_runtime, audio_bitrate)
    files.each{|f| f[:video_bitrate] = video_bitrate; f[:audio_bitrate] = audio_bitrate}
    
    if ARGV.size == 1
        base_name = "#{files.first[:infile_base]}"
    else
        base_name = "Compilation"
        base_name = (base_name || '')+ "_dvd".gsub(/[^0-9a-z]/i,'_').gsub(/_+/,'_')
    end
    
    # Print Summary
    puts "\n"
    puts "Summary"
    puts "======================================================="
    puts " * #{files.size} Titles (#{total_runtime}m): Encoding at #{video_bitrate}kb/s VBR, #{audio_bitrate}kb/s ABR"
    puts files.collect{|f| "   - #{f[:filename]} => #{f[:length]}m"}.join("\n")
    
    # Create DVD compatible MPG's
    files.each do |file|
        infile_base = file[:infile_base]
        infile = file[:filename]
        video_bitrate = file[:video_bitrate]
        audio_bitrate = file[:audio_bitrate]
        length = file[:length]
        
        # Pre-Run Cleanup
        system("rm -rf '#{base_name}_dvd/' '#{infile_base}_dvd.mpg' '#{base_name}.iso'")

        # Create DVD compatible MPG
        puts "\n\n"
        puts "Creating DVD compliant video."
        puts "======================================================="
        puts " * Source: #{infile}"
        puts " * Duration: #{length}"
        puts " * Output: vbr => #{video_bitrate}, abr => #{audio_bitrate}"
        ffmpeg_command = "ffmpeg -threads 4 -i '#{infile}' -aspect #{ASPECT} -target ntsc-dvd -b #{video_bitrate}k -ab #{audio_bitrate}k '#{infile_base}_dvd.mpg'"
        puts "-------------------------------------------------------"
        print "Command: "
        puts ffmpeg_command
        puts "-------------------------------------------------------"
        system(ffmpeg_command)
        raise "Error transcoding!" unless File.exist?("#{infile_base}_dvd.mpg")
    end


    # Author DVD
    puts "\n\n\n"
    puts "Creating VIDEO_TS..."
    puts "======================================================="
    
    chapter_info = []
    files.each do |file|
        chapters = (["0"] + (1..file[:length].divmod(5)[0]).to_a.collect{|t| (5*t).to_s + ":00"}).join(',')
        file_info = "-t --chapters='#{chapters}' -f \"#{file[:infile_base]}_dvd.mpg\" "
        chapter_info << file_info
    end

    author_command = "dvdauthor  #{chapter_info.join(' ')} -o '#{base_name}_dvd/'"
    puts author_command
    system(author_command)
    system("dvdauthor -o '#{base_name}_dvd/' -T")


    # Create ISO
    puts "\n\n\n"
    puts "Creating ISO..."
    puts "======================================================="
    system("mkisofs -V '#{base_name[0..30]}' -dvd-video -udf -v -o '#{base_name}.iso' '#{base_name}_dvd'")


    # Post-Run Cleanup  
    puts "\n\n\n"
    puts "Cleaning Up.."
    puts "======================================================="
    system ("rm *_dvd.mpg")
end

def get_video_bitrate(length,audio_bitrate=AUDIO_BITRATE)
    space_for_video = (DVD_SIZE*1024*1024 - audio_bitrate.to_f*length.to_f)
    video_max_bitrate = ((space_for_video / length.to_f) / 8.0).to_i
    bitrate = [video_max_bitrate,MAX_VIDEO_BITRATE].min
    return bitrate
end

def get_duration(infile)
    info = `ffmpeg -i "#{infile}" 2>&1`
    duration_string = info.match(/Duration: ([0-9]{2}:[0-9]{2}:[0-9]{2})/)[1]
    (hours,minutes,seconds) =  duration_string.split(':')
    length_in_minutes = (hours.to_i*60 + minutes.to_i + 1).to_i
end    

def usage
    return <<EOF
Usage: avi2dvd FILE FILE2 FILE3
   Automatically transcode and author single or multi-title DVD's to ISO. 
   Video bitrate is automatically optimized for runtime.
   Requires ffmpeg, dvdauthor, mkisofs.
EOF
end

if ARGV.empty?
    puts usage()
    exit()
else
    if (ARGV.include?("4:3"))
        ASPECT = "4:3"
        
    else
        ASPECT = "16:9"
    end
    arguments = ARGV.reject{|x| x == "4:3" || x == "16:9"}
    do_convert(arguments)
end



